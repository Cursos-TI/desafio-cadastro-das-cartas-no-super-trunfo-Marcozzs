#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/*
    Programa: WAR Estruturado - Miss√µes Estrat√©gicas
    Objetivo: Implementar miss√µes din√¢micas para jogadores, com sorteio,
              ataque entre territ√≥rios e verifica√ß√£o autom√°tica de vit√≥ria.
    Autor: [Seu Nome]
*/

// ==== Estrutura de dados ====
typedef struct {
    char nome[30];  // Nome do territ√≥rio
    char cor[10];   // Cor do ex√©rcito
    int tropas;     // Quantidade de tropas
} Territorio;

// ==== Declara√ß√£o de fun√ß√µes ====
void cadastrarTerritorios(Territorio* mapa, int quantidade);
void exibirTerritorios(Territorio* mapa, int quantidade);
void atacar(Territorio* atacante, Territorio* defensor);
void atribuirMissao(char* destino, char* missoes[], int totalMissoes);
int verificarMissao(char* missao, Territorio* mapa, int tamanho);
void liberarMemoria(Territorio* mapa, char* missaoJogador);

// ==== Fun√ß√£o principal ====
int main() {
    srand(time(NULL));

    int quantidade;
    printf("Digite o n√∫mero de territ√≥rios a serem cadastrados: ");
    scanf("%d", &quantidade);

    // Aloca√ß√£o din√¢mica de territ√≥rios
    Territorio* mapa = (Territorio*) calloc(quantidade, sizeof(Territorio));
    if (mapa == NULL) {
        printf("Erro ao alocar mem√≥ria para territ√≥rios!\n");
        return 1;
    }

    cadastrarTerritorios(mapa, quantidade);
    exibirTerritorios(mapa, quantidade);

    // === MISS√ïES ===
    char* missoes[] = {
        "Conquistar 3 territ√≥rios consecutivos",
        "Eliminar todas as tropas da cor vermelha",
        "Conquistar pelo menos 2 territ√≥rios da cor azul",
        "Ter 3 territ√≥rios com mais de 5 tropas",
        "Dominar todos os territ√≥rios de uma √∫nica cor inimiga"
    };
    int totalMissoes = sizeof(missoes) / sizeof(missoes[0]);

    // Aloca espa√ßo para miss√£o do jogador
    char* missaoJogador = (char*) malloc(100 * sizeof(char));
    if (missaoJogador == NULL) {
        printf("Erro ao alocar mem√≥ria para a miss√£o!\n");
        free(mapa);
        return 1;
    }

    atribuirMissao(missaoJogador, missoes, totalMissoes);
    printf("\nüéØ Sua miss√£o secreta: %s\n", missaoJogador);

    // === LOOP DE JOGO ===
    char continuar = 's';
    while (continuar == 's' || continuar == 'S') {
        int idAtacante, idDefensor;

        printf("\nEscolha o n√∫mero do territ√≥rio atacante: ");
        scanf("%d", &idAtacante);
        printf("Escolha o n√∫mero do territ√≥rio defensor: ");
        scanf("%d", &idDefensor);

        if (idAtacante < 1 || idAtacante > quantidade ||
            idDefensor < 1 || idDefensor > quantidade) {
            printf("‚ùå √çndice inv√°lido! Tente novamente.\n");
            continue;
        }

        atacar(&mapa[idAtacante - 1], &mapa[idDefensor - 1]);
        exibirTerritorios(mapa, quantidade);

        // Verifica√ß√£o autom√°tica da miss√£o
        if (verificarMissao(missaoJogador, mapa, quantidade)) {
            printf("\nüèÜ MISS√ÉO CUMPRIDA! VOC√ä VENCEU O JOGO!\n");
            break;
        }

        printf("\nDeseja realizar outro ataque? (s/n): ");
        scanf(" %c", &continuar);
    }

    liberarMemoria(mapa, missaoJogador);
    printf("Programa encerrado.\n");

    return 0;
}

// ==== Fun√ß√µes auxiliares ====

// Fun√ß√£o de cadastro
void cadastrarTerritorios(Territorio* mapa, int quantidade) {
    for (int i = 0; i < quantidade; i++) {
        printf("\n=== Cadastro do %d¬∫ Territ√≥rio ===\n", i + 1);

        printf("Digite o nome do territ√≥rio: ");
        scanf(" %[^\n]", mapa[i].nome);

        printf("Digite a cor do ex√©rcito: ");
        scanf(" %[^\n]", mapa[i].cor);

        printf("Digite a quantidade de tropas: ");
        scanf("%d", &mapa[i].tropas);
    }
}

// Fun√ß√£o de exibi√ß√£o
void exibirTerritorios(Territorio* mapa, int quantidade) {
    printf("\n===== ESTADO ATUAL DOS TERRIT√ìRIOS =====\n");
    for (int i = 0; i < quantidade; i++) {
        printf("\nTerrit√≥rio %d:\n", i + 1);
        printf("Nome: %s\n", mapa[i].nome);
        printf("Cor: %s\n", mapa[i].cor);
        printf("Tropas: %d\n", mapa[i].tropas);
    }
    printf("=========================================\n");
}

// Fun√ß√£o de ataque com rolagem de dados
void atacar(Territorio* atacante, Territorio* defensor) {
    printf("\n‚öîÔ∏è  %s (%s) est√° atacando %s (%s)!\n",
           atacante->nome, atacante->cor, defensor->nome, defensor->cor);

    if (strcmp(atacante->cor, defensor->cor) == 0) {
        printf("‚ùå Erro: voc√™ n√£o pode atacar um territ√≥rio da mesma cor!\n");
        return;
    }

    if (atacante->tropas <= 1) {
        printf("‚ùå O territ√≥rio atacante precisa ter mais de 1 tropa para atacar!\n");
        return;
    }

    int dadoAtacante = rand() % 6 + 1;
    int dadoDefensor = rand() % 6 + 1;

    printf("üé≤ Dado atacante: %d | üé≤ Dado defensor: %d\n", dadoAtacante, dadoDefensor);

    if (dadoAtacante > dadoDefensor) {
        printf("üèÜ %s conquistou %s!\n", atacante->nome, defensor->nome);
        strcpy(defensor->cor, atacante->cor);
        defensor->tropas = atacante->tropas / 2;
        atacante->tropas -= defensor->tropas;
    } else {
        printf("üí• %s resistiu ao ataque!\n", defensor->nome);
        atacante->tropas--;
    }
}

// Fun√ß√£o que sorteia uma miss√£o aleat√≥ria
void atribuirMissao(char* destino, char* missoes[], int totalMissoes) {
    int indice = rand() % totalMissoes;
    strcpy(destino, missoes[indice]);
}

// Fun√ß√£o que verifica se a miss√£o foi cumprida
int verificarMissao(char* missao, Territorio* mapa, int tamanho) {
    // L√≥gica simplificada de exemplo:
    if (strstr(missao, "3 territ√≥rios consecutivos") != NULL) {
        // Verifica se h√° 3 territ√≥rios da mesma cor seguidos
        int consecutivos = 1;
        for (int i = 1; i < tamanho; i++) {
            if (strcmp(mapa[i].cor, mapa[i - 1].cor) == 0)
                consecutivos++;
            else
                consecutivos = 1;
            if (consecutivos >= 3)
                return 1;
        }
    }
    else if (strstr(missao, "vermelha") != NULL) {
        // Verifica se ainda existem territ√≥rios vermelhos
        for (int i = 0; i < tamanho; i++) {
            if (strcmp(mapa[i].cor, "vermelha") == 0)
                return 0; // ainda h√° inimigos
        }
        return 1; // todos eliminados
    }
    else if (strstr(missao, "mais de 5 tropas") != NULL) {
        int conta = 0;
        for (int i = 0; i < tamanho; i++) {
            if (mapa[i].tropas > 5)
                conta++;
        }
        if (conta >= 3)
            return 1;
    }

    // Miss√£o ainda n√£o cumprida
    return 0;
}

// Fun√ß√£o para liberar mem√≥ria
void liberarMemoria(Territorio* mapa, char* missaoJogador) {
    free(mapa);
    free(missaoJogador);
    printf("\nüßπ Mem√≥ria liberada com sucesso!\n");
}
